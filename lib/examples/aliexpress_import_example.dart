import '../services/aliexpress_service.dart';

class AliExpressImportExample {
  static final AliExpressService _aliExpressService = AliExpressService();

  /// Exemplo de importa√ß√£o individual com detec√ß√£o autom√°tica de categoria
  static Future<void> importSingleProductExample() async {
    try {
      const productUrl = 'https://www.aliexpress.com/item/1234567890.html';
      
      print('üöÄ Iniciando importa√ß√£o com detec√ß√£o autom√°tica de categoria...');
      
      // Importar produto com detec√ß√£o autom√°tica
      final result = await _aliExpressService.importProductWithAutoCategory(
        productUrl,
        priceOverride: null, // Usar pre√ßo original
        stockQuantity: 10,   // Definir estoque inicial
      );
      
      print('‚úÖ Produto importado com sucesso!');
      print('üì¶ Nome: ${result['name']}');
      print('üí∞ Pre√ßo: R\$ ${result['price']}');
      print('üè∑Ô∏è Categoria detectada: ${result['category_detection']['detected_category']}');
      print('üéØ Confian√ßa: ${(result['category_detection']['confidence'] * 100).toStringAsFixed(1)}%');
      print('üìä Fonte: ${result['category_detection']['source']}');
      
    } catch (e) {
      print('‚ùå Erro na importa√ß√£o: $e');
    }
  }

  /// Exemplo de obten√ß√£o de sugest√µes de categoria antes da importa√ß√£o
  static Future<void> getCategorySuggestionsExample() async {
    try {
      const productUrl = 'https://www.aliexpress.com/item/1234567890.html';
      
      print('üîç Obtendo sugest√µes de categoria...');
      
      // Obter sugest√µes de categoria
      final suggestions = await _aliExpressService.getCategorySuggestions(productUrl);
      
      print('‚úÖ Sugest√µes encontradas:');
      for (int i = 0; i < suggestions.length; i++) {
        final suggestion = suggestions[i];
        print('${i + 1}. ${suggestion['category']} (${(suggestion['confidence'] * 100).toStringAsFixed(1)}% confian√ßa)');
        print('   Fonte: ${suggestion['source']}');
        print('   Categoria AliExpress: ${suggestion['ali_express_category']}');
        print('');
      }
      
    } catch (e) {
      print('‚ùå Erro ao obter sugest√µes: $e');
    }
  }

  /// Exemplo de detec√ß√£o de categoria sem importar
  static Future<void> detectCategoryExample() async {
    try {
      const productUrl = 'https://www.aliexpress.com/item/1234567890.html';
      
      print('üîç Detectando categoria sem importar...');
      
      // Detectar categoria
      final result = await _aliExpressService.detectCategoryForProduct(productUrl);
      
      final productDetails = result['product_details'];
      final categoryDetection = result['category_detection'];
      
      print('‚úÖ Detec√ß√£o conclu√≠da:');
      print('üì¶ Produto: ${productDetails['name']}');
      print('üè∑Ô∏è Categoria: ${categoryDetection['detected_category']}');
      print('üéØ Confian√ßa: ${(categoryDetection['confidence'] * 100).toStringAsFixed(1)}%');
      print('üìä Fonte: ${categoryDetection['source']}');
      print('üåê Categoria AliExpress: ${categoryDetection['ali_express_category']}');
      
    } catch (e) {
      print('‚ùå Erro na detec√ß√£o: $e');
    }
  }

  /// Exemplo de importa√ß√£o em lote com detec√ß√£o autom√°tica
  static Future<void> bulkImportExample() async {
    try {
      final productUrls = [
        'https://www.aliexpress.com/item/1234567890.html',
        'https://www.aliexpress.com/item/0987654321.html',
        'https://www.aliexpress.com/item/1122334455.html',
      ];
      
      print('üöÄ Iniciando importa√ß√£o em lote com detec√ß√£o autom√°tica...');
      
      // Importar produtos em lote
      final result = await _aliExpressService.importBulkProductsWithAutoCategory(productUrls);
      
      print('‚úÖ Importa√ß√£o em lote conclu√≠da:');
      print('üìä Total processado: ${result['total_processed']}');
      print('‚úÖ Sucessos: ${result['total_success']}');
      print('‚ùå Erros: ${result['total_errors']}');
      
      // Mostrar detalhes dos sucessos
      if (result['success'].isNotEmpty) {
        print('\nüì¶ Produtos importados com sucesso:');
        for (final success in result['success']) {
          final productResult = success['result'];
          final categoryDetection = productResult['category_detection'];
          print('- ${productResult['name']} ‚Üí ${categoryDetection['detected_category']} (${(categoryDetection['confidence'] * 100).toStringAsFixed(1)}%)');
        }
      }
      
      // Mostrar detalhes dos erros
      if (result['errors'].isNotEmpty) {
        print('\n‚ùå Erros encontrados:');
        for (final error in result['errors']) {
          print('- ${error['url']}: ${error['error']}');
        }
      }
      
    } catch (e) {
      print('‚ùå Erro na importa√ß√£o em lote: $e');
    }
  }

  /// Exemplo completo de workflow de importa√ß√£o
  static Future<void> completeWorkflowExample() async {
    try {
      const productUrl = 'https://www.aliexpress.com/item/1234567890.html';
      
      print('üöÄ Workflow completo de importa√ß√£o com detec√ß√£o de categoria');
      print('=' * 60);
      
      // 1. Detectar categoria primeiro
      print('\n1Ô∏è‚É£ Detectando categoria...');
      final detectionResult = await _aliExpressService.detectCategoryForProduct(productUrl);
      final categoryDetection = detectionResult['category_detection'];
      
      print('   Categoria detectada: ${categoryDetection['detected_category']}');
      print('   Confian√ßa: ${(categoryDetection['confidence'] * 100).toStringAsFixed(1)}%');
      
      // 2. Obter sugest√µes alternativas
      print('\n2Ô∏è‚É£ Obtendo sugest√µes alternativas...');
      final suggestions = await _aliExpressService.getCategorySuggestions(productUrl);
      
      print('   Sugest√µes dispon√≠veis:');
      for (int i = 0; i < suggestions.length && i < 3; i++) {
        final suggestion = suggestions[i];
        print('   ${i + 1}. ${suggestion['category']} (${(suggestion['confidence'] * 100).toStringAsFixed(1)}%)');
      }
      
      // 3. Importar produto com categoria detectada
      print('\n3Ô∏è‚É£ Importando produto...');
      final importResult = await _aliExpressService.importProductWithAutoCategory(
        productUrl,
        stockQuantity: 5,
      );
      
      print('   ‚úÖ Produto importado com sucesso!');
      print('   üì¶ Nome: ${importResult['name']}');
      print('   üí∞ Pre√ßo: R\$ ${importResult['price']}');
      print('   üè∑Ô∏è Categoria final: ${importResult['category_detection']['detected_category']}');
      print('   üíæ Salvo no Firebase com dados completos da categoria');
      
      print('\nüéâ Workflow conclu√≠do com sucesso!');
      
    } catch (e) {
      print('‚ùå Erro no workflow: $e');
    }
  }
}
