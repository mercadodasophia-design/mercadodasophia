import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/user_location.dart';
import '../services/location_service.dart';
import '../services/auth_service.dart';

class LocationProvider extends ChangeNotifier {
  final LocationService _locationService = LocationService();
  
  UserLocation? _currentLocation;
  bool _isLoading = false;
  String? _error;
  bool _hasPermission = false;
  Map<String, dynamic>? _savedAddress;
  bool _hasSavedAddress = false;

  // Getters
  UserLocation? get currentLocation => _currentLocation;
  bool get isLoading => _isLoading;
  String? get error => _error;
  bool get hasPermission => _hasPermission;
  bool get hasLocation => _currentLocation != null && _currentLocation!.isValid;
  bool get hasSavedAddress => _hasSavedAddress;
  Map<String, dynamic>? get savedAddress => _savedAddress;

  // Inicializar localiza√ß√£o
  Future<void> initializeLocation() async {
    _setLoading(true);
    _clearError();

    try {
      // Primeiro, verificar se o usu√°rio tem endere√ßos salvos
      await _loadSavedAddress();
      
      // Se n√£o tem endere√ßo salvo, usar localiza√ß√£o atual
      if (!_hasSavedAddress) {
        // Verificar permiss√µes
        bool permissionGranted = await _locationService.requestLocationPermission();
        _hasPermission = permissionGranted;

        if (!permissionGranted) {
          _setError('Permiss√£o de localiza√ß√£o necess√°ria para melhor experi√™ncia');
          _setLoading(false);
          return;
        }

        // Obter localiza√ß√£o
        await getCurrentLocation();
      }
    } catch (e) {
      _setError('Erro ao inicializar localiza√ß√£o: $e');
    } finally {
      _setLoading(false);
    }
  }

  // Carregar endere√ßo salvo do usu√°rio
  Future<void> _loadSavedAddress() async {
    try {
      // Por enquanto, vamos simular que n√£o h√° endere√ßo salvo
      // Em uma implementa√ß√£o real, voc√™ precisaria ter acesso ao AuthService
      // e buscar os dados do usu√°rio no Firestore
      _hasSavedAddress = false;
      _savedAddress = null;
    } catch (e) {
      _hasSavedAddress = false;
      _savedAddress = null;
    }
  }

  // M√©todo p√∫blico para carregar endere√ßo salvo com AuthService
  Future<void> loadSavedAddressWithAuth(AuthService authService) async {
    try {
      final user = authService.currentUser;
      if (user != null) {
        final doc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();
        
        final userData = doc.data();
        if (userData != null && userData['selectedAddress'] != null) {
          _savedAddress = Map<String, dynamic>.from(userData['selectedAddress']);
          _hasSavedAddress = true;
          notifyListeners();
        } else {
          _hasSavedAddress = false;
          _savedAddress = null;
        }
      }
    } catch (e) {
      _hasSavedAddress = false;
      _savedAddress = null;
    }
  }

  // Obter localiza√ß√£o atual
  Future<void> getCurrentLocation() async {
    _setLoading(true);
    _clearError();

    try {
      print('üéØ Iniciando obten√ß√£o de localiza√ß√£o com alta precis√£o...');
      Map<String, dynamic>? locationData = await _locationService.getFullLocation();
      
      if (locationData != null) {
        try {
          print('üìç Dados de localiza√ß√£o obtidos: $locationData');
          _currentLocation = UserLocation.fromPosition(locationData);
          
          // Validar se as coordenadas s√£o razo√°veis para o Brasil
          if (_currentLocation != null) {
            bool isValid = _locationService.isValidBrazilianCoordinates(
              _currentLocation!.latitude,
              _currentLocation!.longitude,
            );
            
            if (!isValid) {
              print('‚ö†Ô∏è Coordenadas fora do Brasil detectadas');
              _setError('Localiza√ß√£o parece estar fora do Brasil. Verifique o GPS.');
            } else {
              print('‚úÖ Coordenadas v√°lidas para o Brasil');
            }
            
            // Mostrar precis√£o da localiza√ß√£o
            if (_currentLocation!.accuracy != null) {
              String accuracyDesc = _locationService.getAccuracyDescription(_currentLocation!.accuracy!);
              print('üìç Precis√£o da localiza√ß√£o: $accuracyDesc');
            }
          }
          
          print('üìç Localiza√ß√£o criada: ${_currentLocation!.address}');
          
          // SEMPRE tentar obter endere√ßo, mesmo se j√° tiver um
          print('üîÑ For√ßando atualiza√ß√£o do endere√ßo...');
          await _updateAddressFromCoordinates();
          
          notifyListeners();
        } catch (e) {
          print('‚ùå Erro ao criar UserLocation: $e');
          _setError('Erro ao processar dados de localiza√ß√£o');
        }
      } else {
        print('‚ùå Nenhum dado de localiza√ß√£o obtido');
        _setError('N√£o foi poss√≠vel obter a localiza√ß√£o atual');
      }
    } catch (e) {
      print('‚ùå Erro ao obter localiza√ß√£o: $e');
      _setError('Erro ao obter localiza√ß√£o: $e');
    } finally {
      _setLoading(false);
    }
  }

  // Atualizar endere√ßo a partir das coordenadas
  Future<void> _updateAddressFromCoordinates() async {
    if (_currentLocation == null) return;
    
    print('üîÑ Atualizando endere√ßo para coordenadas: ${_currentLocation!.latitude}, ${_currentLocation!.longitude}');
    
    try {
      String? address = await _locationService.getAddressFromCoordinates(
        _currentLocation!.latitude,
        _currentLocation!.longitude,
      );
      
      print('üìç Endere√ßo retornado: $address');
      
      if (address != null && address.isNotEmpty) {
        print('‚úÖ Atualizando localiza√ß√£o com novo endere√ßo');
        _currentLocation = _currentLocation!.copyWith(address: address);
        notifyListeners();
      } else {
        print('‚ö†Ô∏è Endere√ßo vazio ou nulo retornado');
      }
    } catch (e) {
      print('‚ùå Erro ao atualizar endere√ßo: $e');
    }
  }

  // Obter localiza√ß√£o aproximada (mais r√°pida)
  Future<void> getApproximateLocation() async {
    _setLoading(true);
    _clearError();

    try {
      var position = await _locationService.getApproximateLocation();
      
      if (position != null) {
        String? address;
        try {
          address = await _locationService.getAddressFromCoordinates(
            position.latitude,
            position.longitude,
          );
        } catch (e) {
          print('Erro ao obter endere√ßo: $e');
          address = null;
        }

        _currentLocation = UserLocation(
          latitude: position.latitude,
          longitude: position.longitude,
          accuracy: position.accuracy,
          altitude: position.altitude,
          speed: position.speed,
          heading: position.heading,
          timestamp: position.timestamp,
          address: address,
        );
        
        notifyListeners();
      } else {
        _setError('N√£o foi poss√≠vel obter a localiza√ß√£o aproximada');
      }
    } catch (e) {
      _setError('Erro ao obter localiza√ß√£o aproximada: $e');
    } finally {
      _setLoading(false);
    }
  }

  // Atualizar localiza√ß√£o manualmente
  void updateLocation(UserLocation location) {
    _currentLocation = location;
    _clearError();
    notifyListeners();
  }

  // Limpar localiza√ß√£o
  void clearLocation() {
    _currentLocation = null;
    _clearError();
    notifyListeners();
  }

  // Definir endere√ßo salvo
  void setSavedAddress(Map<String, dynamic> address) {
    _savedAddress = address;
    _hasSavedAddress = true;
    notifyListeners();
  }

  // Limpar endere√ßo salvo
  void clearSavedAddress() {
    _savedAddress = null;
    _hasSavedAddress = false;
    notifyListeners();
  }

  // Atualizar endere√ßo salvo
  Future<void> updateSavedAddress() async {
    await _loadSavedAddress();
  }

  // For√ßar atualiza√ß√£o do endere√ßo atual
  Future<void> refreshAddress() async {
    if (_currentLocation != null && hasLocation) {
      await _updateAddressFromCoordinates();
    }
  }

  // Calcular dist√¢ncia at√© um ponto
  double calculateDistanceTo(double latitude, double longitude) {
    if (!hasLocation || _currentLocation == null) return -1;
    
    try {
      final location = _currentLocation!;
      return _locationService.calculateDistance(
        location.latitude,
        location.longitude,
        latitude,
        longitude,
      );
    } catch (e) {
      print('Erro ao calcular dist√¢ncia: $e');
      return -1;
    }
  }

  // Verificar se est√° dentro de uma √°rea
  bool isWithinRadius(double centerLat, double centerLng, double radiusInMeters) {
    if (!hasLocation || _currentLocation == null) return false;
    
    try {
      final location = _currentLocation!;
      return _locationService.isWithinRadius(
        centerLat,
        centerLng,
        location.latitude,
        location.longitude,
        radiusInMeters,
      );
    } catch (e) {
      print('Erro ao verificar raio: $e');
      return false;
    }
  }

  // Obter endere√ßo formatado
  String getFormattedAddress() {
    try {
      print('üìç getFormattedAddress() chamado');
      print('  - hasSavedAddress: $_hasSavedAddress');
      print('  - currentLocation: ${_currentLocation != null}');
      print('  - hasLocation: $hasLocation');
      
      // Prioridade: endere√ßo salvo > localiza√ß√£o atual
      if (_hasSavedAddress && _savedAddress != null) {
        print('  - Usando endere√ßo salvo');
        return _formatSavedAddress();
      }
      
      if (_currentLocation == null || !hasLocation) {
        print('  - Localiza√ß√£o n√£o dispon√≠vel');
        return 'Localiza√ß√£o n√£o dispon√≠vel';
      }
      
      final location = _currentLocation!;
      print('  - Endere√ßo atual: ${location.address}');
      print('  - Coordenadas: ${location.latitude}, ${location.longitude}');
      
      // Mostrar informa√ß√µes de precis√£o se dispon√≠vel
      if (location.accuracy != null) {
        String accuracyDesc = _locationService.getAccuracyDescription(location.accuracy!);
        print('  - Precis√£o: $accuracyDesc');
      }
      
      // Se temos um endere√ßo v√°lido, usar ele
      if (location.address != null && location.address!.isNotEmpty && 
          !location.address!.contains('Localiza√ß√£o:')) {
        print('  - Retornando endere√ßo v√°lido: ${location.address}');
        return location.address!;
      }
      
      // Verifica√ß√£o adicional de seguran√ßa
      if (location.latitude == 0.0 && location.longitude == 0.0) {
        print('  - Coordenadas inv√°lidas');
        return 'Localiza√ß√£o n√£o dispon√≠vel';
      }
      
      // Se n√£o temos endere√ßo ou √© apenas coordenadas, tentar obter endere√ßo novamente
      if (location.address == null || location.address!.isEmpty || 
          location.address!.contains('Localiza√ß√£o:')) {
        print('  - Endere√ßo inv√°lido, retornando coordenadas formatadas');
        // Retornar coordenadas formatadas de forma mais amig√°vel com precis√£o
        String baseText = 'Localiza√ß√£o: ${location.latitude.toStringAsFixed(4)}, ${location.longitude.toStringAsFixed(4)}';
        if (location.accuracy != null) {
          String accuracyDesc = _locationService.getAccuracyDescription(location.accuracy!);
          return '$baseText ($accuracyDesc)';
        }
        return baseText;
      }
      
      print('  - Retornando endere√ßo final: ${location.address}');
      return location.address!;
    } catch (e) {
      print('‚ùå Erro ao formatar endere√ßo: $e');
      return 'Localiza√ß√£o n√£o dispon√≠vel';
    }
  }

  // Formatar endere√ßo salvo
  String _formatSavedAddress() {
    if (_savedAddress == null) return 'Endere√ßo n√£o dispon√≠vel';
    
    try {
      final address = _savedAddress!;
      final street = address['street'] ?? '';
      final number = address['number'] ?? '';
      final neighborhood = address['neighborhood'] ?? '';
      final city = address['city'] ?? '';
      final state = address['state'] ?? '';
      
      if (street.isNotEmpty && number.isNotEmpty) {
        return '$street, $number - $neighborhood, $city/$state';
      } else if (street.isNotEmpty) {
        return '$street - $neighborhood, $city/$state';
      } else {
        return '$city/$state';
      }
    } catch (e) {
      return 'Endere√ßo n√£o dispon√≠vel';
    }
  }

  // Obter cidade atual
  String? getCurrentCity() {
    try {
      if (_currentLocation == null) return null;
      return _currentLocation!.city;
    } catch (e) {
      print('Erro ao obter cidade: $e');
      return null;
    }
  }

  // Obter estado atual
  String? getCurrentState() {
    try {
      if (_currentLocation == null) return null;
      return _currentLocation!.state;
    } catch (e) {
      print('Erro ao obter estado: $e');
      return null;
    }
  }

  // Verificar se est√° em uma cidade espec√≠fica
  bool isInCity(String cityName) {
    if (!hasLocation || _currentLocation == null) return false;
    
    try {
      String? currentCity = getCurrentCity();
      if (currentCity == null || currentCity.isEmpty) return false;
      
      return currentCity.toLowerCase().contains(cityName.toLowerCase());
    } catch (e) {
      print('Erro ao verificar cidade: $e');
      return false;
    }
  }

  // Verificar se est√° em um estado espec√≠fico
  bool isInState(String stateName) {
    if (!hasLocation || _currentLocation == null) return false;
    
    try {
      String? currentState = getCurrentState();
      if (currentState == null || currentState.isEmpty) return false;
      
      return currentState.toLowerCase().contains(stateName.toLowerCase());
    } catch (e) {
      print('Erro ao verificar estado: $e');
      return false;
    }
  }

  // M√©todos privados para gerenciar estado
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void _clearError() {
    _error = null;
  }

  // Disposer
  @override
  void dispose() {
    super.dispose();
  }
}
